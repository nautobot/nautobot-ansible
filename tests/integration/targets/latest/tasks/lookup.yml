---
##
##
### PYNAUTOBOT_LOOKUP
##
##
- name: "PYNAUTOBOT_LOOKUP 1: Lookup returns exactly six locations"
  assert:
    that: "query_result | count == 6"
  vars:
    query_result: "{{ query('networktocode.nautobot.lookup', 'locations', api_endpoint=nautobot_url, token=nautobot_token) }}"

- name: "PYNAUTOBOT_LOOKUP 2: Query doesn't return Wibble (sanity check json_query)"
  assert:
    that: "query_result | json_query('[?value.display==`Wibble`]') | count == 0"
  vars:
    query_result: "{{ query('networktocode.nautobot.lookup', 'devices', api_endpoint=nautobot_url, token=nautobot_token) }}"

- name: "PYNAUTOBOT_LOOKUP 3: Device query returns exactly one TestDeviceR1"
  assert:
    that: "query_result | json_query('[?value.display==`TestDeviceR1`]') | count == 1"
  vars:
    query_result: "{{ query('networktocode.nautobot.lookup', 'devices', api_endpoint=nautobot_url, token=nautobot_token) }}"

- name: "PYNAUTOBOT_LOOKUP 4: VLAN ID 400 can be queried and is named 'Test VLAN'"
  assert:
    that: "query_result | json_query('[?value.vid==`400`].value.name') | first == 'Test VLAN'"
  vars:
    query_result: "{{ query('networktocode.nautobot.lookup', 'vlans', api_endpoint=nautobot_url, token=nautobot_token) }}"

- set_fact:
    test_location: "{{ lookup('networktocode.nautobot.lookup', 'locations', api_endpoint=nautobot_url, token=nautobot_token, api_filter='name=\"Child Test Location\"') }}"
    child_test_location: "{{ lookup('networktocode.nautobot.lookup', 'locations', api_endpoint=nautobot_url, token=nautobot_token, api_filter='name=\"Child-Child Test Location\"') }}"

- name: "PYNAUTOBOT_LOOKUP 5: Add one of two devices for lookup filter test."
  networktocode.nautobot.device:
    url: "{{ nautobot_url }}"
    token: "{{ nautobot_token }}"
    name: "L1"
    device_type: "Cisco Test"
    role: "Core Switch"
    location:
      name: "Child Test Location"
      parent: "Parent Test Location"
    status: "Staged"
    tags:
      - "Nolookup"
    state: present

- name: "PYNAUTOBOT_LOOKUP 6: Add two of two devices for lookup filter test."
  networktocode.nautobot.device:
    url: "{{ nautobot_url }}"
    token: "{{ nautobot_token }}"
    name: "L2"
    device_type: "Cisco Test"
    role: "Core Switch"
    location: "Child-Child Test Location"
    status: "Staged"
    tags:
      - "Lookup"
    state: present

- name: "PYNAUTOBOT_LOOKUP 7: Device query returns exactly the L2 device"
  assert:
    that: "query_result | json_query('[?value.display==`L2`]') | count == 1"
  vars:
    query_result: "{{ query('networktocode.nautobot.lookup', 'devices', api_filter='role=\"Core Switch\" tags=Lookup', api_endpoint=nautobot_url, token=nautobot_token) }}"

- name: "PYNAUTOBOT_LOOKUP 8: Device query specifying raw data returns payload without key/value dict"
  assert:
    that: "query_result | json_query('[?display==`L2`]') | count == 1"
  vars:
    query_result: "{{ query('networktocode.nautobot.lookup', 'devices', api_filter='role=\"Core Switch\" tags=Lookup', api_endpoint=nautobot_url, token=nautobot_token, raw_data=True) }}"

- name: "PYNAUTOBOT_LOOKUP 9: Device query specifying multiple locations, Make sure L1 and L2 are in the results"
  assert:
    that:
      - "'L1' in query_result | json_query('[*].display')"
      - "'L2' in query_result | json_query('[*].display')"
  vars:
    query_result: "{{ query('networktocode.nautobot.lookup', 'devices', api_filter='role=\"Core Switch\" location=\"Child Test Location\" location=\"Child-Child Test Location\"', api_endpoint=nautobot_url, token=nautobot_token, raw_data=True) }}"

- name: "PYNAUTOBOT_LOOKUP 10: Lookup with retries set"
  assert:
    that: "query_result | count == 6"
  vars:
    query_result: "{{ query('networktocode.nautobot.lookup', 'locations', api_endpoint=nautobot_url, token=nautobot_token, num_retries=3) }}"